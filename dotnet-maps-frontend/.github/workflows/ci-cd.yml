name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Unit Tests
      run: dotnet test Tests/DotNetMapsFrontend.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: '**/*.trx'
        reporter: dotnet-trx
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Install Playwright browsers
      run: |
        cd Tests
        dotnet build
        pwsh bin/Release/net9.0/playwright.ps1 install
        
    - name: Start Application
      run: |
        dotnet run --configuration Release &
        sleep 10
        
    - name: Run E2E Tests
      run: |
        cd Tests
        dotnet test --filter "Category=E2E" --configuration Release
        
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: Tests/test-results/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Install security scanning tools
      run: |
        dotnet tool install --global security-scan
        
    - name: Run security scan
      run: security-scan --project DotNetMapsFrontend.csproj
      continue-on-error: true

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Start Application
      run: |
        dotnet run --configuration Release &
        sleep 10
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run Performance Tests
      run: |
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        import { check } from 'k6';
        
        export default function () {
          let response = http.get('http://localhost:4200/Map');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          
          response = http.get('http://localhost:4200/PointOfInterest');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
        }
        EOF