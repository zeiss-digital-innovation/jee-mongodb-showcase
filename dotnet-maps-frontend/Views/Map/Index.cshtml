@using DotNetMapsFrontend.Constants
@{
    ViewData["Title"] = "Point of Interest Map";
}

<style>
    /* Fixed top controls */
    .top-controls {
        position: fixed;
        top: 56px; /* Height of navbar */
        left: 0;
        right: 0;
        background-color: white;
        padding: 15px 0;
        border-bottom: 1px solid #dee2e6;
        z-index: 1000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Map container with margin for controls */
    .map-container {
        margin-top: 210px; /* Space for fixed controls including filter */
        height: calc(100vh - 270px); /* Full height minus navbar and controls */
    }
    
    .map_large {
        height: 100%;
        width: 100%;
    }
    
    /* Move Leaflet zoom controls below fixed controls */
    .leaflet-top.leaflet-left {
        top: 80px; /* Position below top-controls (navbar is 56px) */
    }

     /* Visual separator between coordinate controls and filter section */
    #sharedFilterCategoryControls {
        border-top: 3px solid #6b6b6c;
    }
</style>

<!-- Fixed Top Controls -->
<div class="top-controls">
    <div class="container">
        <partial name="_PoiControls" />
    </div>
</div>

<div class="container map-container">
    <div id="map" class="jumbotron map_large"></div>
</div>

<!-- POI Creation Modal -->
<div class="modal fade modal-sm" id="createPoiModal" tabindex="-1" aria-labelledby="createPoiModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="createPoiModalLabel">
                    <i class="bi bi-plus-circle me-2"></i>Create New Point of Interest
                </h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createPoiForm">
                    <div class="mb-3">
                        <label for="poiCategory" class="form-label">Category *</label>
                        <select class="form-select" id="poiCategory" required>
                            <option value="">-- Select Category --</option>
                        </select>
                        <div class="invalid-feedback">
                            Please select a category.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="poiName" class="form-label">Name *</label>
                        <input type="text" class="form-control" id="poiName" 
                               placeholder="Enter a name for this point of interest..." 
                               required maxlength="200">
                        <div class="invalid-feedback">
                            Please enter a name (max 200 characters).
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="poiDetails" class="form-label">Details *</label>
                        <textarea class="form-control" id="poiDetails" rows="4" 
                                  placeholder="Enter details about this point of interest..." 
                                  required maxlength="1000"></textarea>
                        <div class="invalid-feedback">
                            Please enter details (max 1000 characters).
                        </div>
                        <div class="form-text">
                            You can use quotes, special characters, and line breaks.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">
                            <i class="bi bi-geo-fill"></i> Location: <span id="selectedCoordinates"></span>
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning btn-sm" data-bs-dismiss="modal" id="cancelPoiBtn">
                    <i class="bi bi-x-lg me-1"></i>Cancel (Esc)
                </button>
                <button type="button" class="btn btn-primary btn-sm" id="savePoiBtn" disabled>
                    <i class="bi bi-check2 me-1"></i>Save (Enter)
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/category-manager.js"></script>
    <script>
        let map;
        let pointsOfInterest = [];
        let selectedLatitude = null;
        let selectedLongitude = null;
        let availableCategories = [];
        let markersLayer = L.layerGroup(); // Layer to hold all POI markers
        
        // localStorage keys for synchronization between pages
        const STORAGE_KEYS = {
            latitude: 'poi_latitude',
            longitude: 'poi_longitude',
            radius: 'poi_radius',
            view: 'poi_view',
            lastUpdate: 'poi_last_update',
            needsReload: 'poi_needs_reload',
            sessionStart: 'poi_session_start',
            mapZoom: 'poi_map_zoom'
        };
        
        // Default coordinates (Dresden)
        const latitudeDefault = 51.0504;
        const longitudeDefault = 13.7373;
        const radiusDefault = 2000;
        const zoomDefault = 13;
        
        // Category icon mapping from server-side CategoryConstants
        const CATEGORY_ICONS = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(CategoryConstants.GetIconMappingDictionary()));
        
        // Function to get Bootstrap icon class for a category
        function getCategoryIcon(category) {
            return CATEGORY_ICONS[category?.toLowerCase()] || CATEGORY_ICONS['_default'] || 'bi-geo';
        }
        
        // Session timeout: 30 minutes of inactivity = new session
        const SESSION_TIMEOUT_MS = 30 * 60 * 1000;
        
        // Flag to prevent moveend from overwriting manual input changes
        let programmaticMapMove = false;
        
        // Initialize the map when the page loads
        $(document).ready(async function () {
            // Initialize CategoryManager
            await CategoryManager.init();
            
            // Listen for category selection changes and reload POIs
            document.addEventListener('categorySelectionChanged', function() {
                console.log('[Map] Category selection changed - reloading POIs');
                reloadCurrentPois();
            });
            // Check if this is a new browser session
            const lastActivity = localStorage.getItem(STORAGE_KEYS.sessionStart);
            const now = Date.now();
            const isNewSession = !lastActivity || (now - parseInt(lastActivity)) > SESSION_TIMEOUT_MS;
            
            if (isNewSession) {
                // This is a NEW session - clear settings but keep view preference
                localStorage.removeItem(STORAGE_KEYS.latitude);
                localStorage.removeItem(STORAGE_KEYS.longitude);
                localStorage.removeItem(STORAGE_KEYS.radius);
                localStorage.removeItem(STORAGE_KEYS.needsReload);
                localStorage.removeItem(STORAGE_KEYS.mapZoom);
                localStorage.setItem(STORAGE_KEYS.view, 'cards');
            }
            
            // Update session timestamp
            localStorage.setItem(STORAGE_KEYS.sessionStart, now.toString());
            
            // Load values from localStorage or use defaults
            loadSettingsFromStorage();
            
            // Check if we need to reload due to updates from List page
            checkForReloadFlag();
            
            // Initialize map with loaded settings
            initializeMap();
            loadEditModalCategories();
            setupModalEventHandlers();
            setupControlHandlers();
            
            // Listen for page visibility changes to sync with List page
            // This ensures input fields are updated when navigating back from List page
            window.addEventListener('pageshow', function(event) {
                console.log('[Map] pageshow event - reloading settings from localStorage');
                const lat = parseFloat(localStorage.getItem(STORAGE_KEYS.latitude));
                const lon = parseFloat(localStorage.getItem(STORAGE_KEYS.longitude));
                const radius = parseInt(localStorage.getItem(STORAGE_KEYS.radius));
                
                if (!isNaN(lat) && !isNaN(lon) && !isNaN(radius)) {
                    $('#latitudeInput').val(lat);
                    $('#longitudeInput').val(lon);
                    $('#radiusInput').val(radius);
                    $('#radiusValue').text(radius + ' m');
                    
                    // Update map center if coordinates changed
                    const currentCenter = map.getCenter();
                    if (Math.abs(currentCenter.lat - lat) > 0.0001 || Math.abs(currentCenter.lng - lon) > 0.0001) {
                        console.log('[Map] Coordinates changed, updating map center');
                        map.setView([lat, lon], map.getZoom());
                    }
                }
            });
            
            // Also listen for focus events (when user returns to this tab)
            window.addEventListener('focus', function() {
                console.log('[Map] window focus event - reloading settings from localStorage');
                const lat = parseFloat(localStorage.getItem(STORAGE_KEYS.latitude));
                const lon = parseFloat(localStorage.getItem(STORAGE_KEYS.longitude));
                const radius = parseInt(localStorage.getItem(STORAGE_KEYS.radius));
                
                if (!isNaN(lat) && !isNaN(lon) && !isNaN(radius)) {
                    $('#latitudeInput').val(lat);
                    $('#longitudeInput').val(lon);
                    $('#radiusInput').val(radius);
                    $('#radiusValue').text(radius + ' m');
                }
            });
        });
        
        function loadSettingsFromStorage() {
            // Load values from localStorage or use defaults
            const lat = localStorage.getItem(STORAGE_KEYS.latitude);
            const lon = localStorage.getItem(STORAGE_KEYS.longitude);
            const radius = localStorage.getItem(STORAGE_KEYS.radius);
            
            const actualLat = lat ? parseFloat(lat) : latitudeDefault;
            const actualLon = lon ? parseFloat(lon) : longitudeDefault;
            const actualRadius = radius ? parseInt(radius) : radiusDefault;
            
            // Set input fields to actual values
            $('#latitudeInput').val(actualLat);
            $('#longitudeInput').val(actualLon);
            $('#radiusInput').val(actualRadius);
            $('#radiusValue').text(actualRadius + ' m');
            
            // Save to localStorage if they were defaults (ensures consistency)
            if (!lat) localStorage.setItem(STORAGE_KEYS.latitude, actualLat);
            if (!lon) localStorage.setItem(STORAGE_KEYS.longitude, actualLon);
            if (!radius) localStorage.setItem(STORAGE_KEYS.radius, actualRadius);
        }
        
        function saveSettingsToStorage() {
            const lat = $('#latitudeInput').val();
            const lon = $('#longitudeInput').val();
            const radius = $('#radiusInput').val();
            
            localStorage.setItem(STORAGE_KEYS.latitude, lat);
            localStorage.setItem(STORAGE_KEYS.longitude, lon);
            localStorage.setItem(STORAGE_KEYS.radius, radius);
            
            // Set flag that List page needs to reload
            localStorage.setItem(STORAGE_KEYS.needsReload, 'true');
        }
        
        function checkForReloadFlag() {
            // Check if List page triggered a reload request
            const needsReload = localStorage.getItem(STORAGE_KEYS.needsReload);
            if (needsReload === 'true') {
                // Clear the flag
                localStorage.removeItem(STORAGE_KEYS.needsReload);
                
                // Reload the map with stored parameters after initialization
                // Set a flag to reload after map is initialized
                window.mapNeedsReload = true;
            }
        }
        
        function setupControlHandlers() {
            // Update radius display when slider changes and save to storage
            $('#radiusInput').on('input', function () {
                const newRadius = $(this).val();
                $('#radiusValue').text(newRadius + ' m');
                saveSettingsToStorage();
                
                // Reload POIs with new radius
                const center = map.getCenter();
                loadPointsOfInterest(center.lat, center.lng, parseInt(newRadius));
            });
            
            // When user changes coordinates manually, move map center
            $('#latitudeInput, #longitudeInput').on('change', function () {
                console.log('[Map] Coordinate input changed');
                const lat = parseFloat($('#latitudeInput').val());
                const lon = parseFloat($('#longitudeInput').val());
                
                console.log(`[Map] New coordinates: lat=${lat}, lon=${lon}`);
                
                // Validate coordinates
                if (!isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
                    console.log('[Map] Coordinates valid, updating map view');
                    
                    // Set flag to prevent moveend from overwriting input fields
                    programmaticMapMove = true;
                    
                    // Save to localStorage BEFORE moving map
                    saveSettingsToStorage();
                    
                    // Move map to new center (keeps current zoom level)
                    map.setView([lat, lon], map.getZoom());
                    
                    // POIs will be automatically reloaded by moveend event handler
                    console.log('[Map] Map moved, moveend event will trigger POI reload');
                } else {
                    console.log('[Map] Invalid coordinates');
                    alert('Invalid coordinates. Latitude must be between -90 and 90, Longitude between -180 and 180.');
                    // Restore previous valid values
                    loadSettingsFromStorage();
                }
            });
            
            // Load POIs button handler - using event delegation for reliability
            $(document).on('click', '#loadPoisBtn', function (e) {
                console.log('[Map] Load POIs button clicked');
                e.preventDefault(); // Prevent any default behavior
                
                const lat = parseFloat($('#latitudeInput').val());
                const lon = parseFloat($('#longitudeInput').val());
                const radius = parseInt($('#radiusInput').val());
                
                console.log(`[Map] Loading POIs for: lat=${lat}, lon=${lon}, radius=${radius}`);
                
                // Set flag to prevent moveend from overwriting input fields
                programmaticMapMove = true;
                
                // Save to localStorage BEFORE moving map
                saveSettingsToStorage();
                
                // Update map center and reload POIs
                map.setView([lat, lon], map.getZoom());
                loadPointsOfInterest(lat, lon, radius);
            });
        }
        
        function initializeMap() {
            // Fix for default markers in Leaflet with ASP.NET
            delete L.Icon.Default.prototype._getIconUrl;
            L.Icon.Default.mergeOptions({
                iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
                iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
                shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
            });
            
            // Get current values from inputs (already loaded from localStorage)
            const currentLat = parseFloat($('#latitudeInput').val());
            const currentLon = parseFloat($('#longitudeInput').val());
            const currentRadius = parseInt($('#radiusInput').val());
            
            // Load saved zoom level or use default
            const savedZoom = localStorage.getItem(STORAGE_KEYS.mapZoom);
            const currentZoom = savedZoom ? parseInt(savedZoom) : zoomDefault;
            
            // Initialize the map with current settings
            map = L.map('map').setView([currentLat, currentLon], currentZoom);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            // Add markers layer to map
            markersLayer.addTo(map);
            
            // Disable default browser context menu on map
            map.getContainer().addEventListener('contextmenu', function (e) {
                e.preventDefault();
            });
            
            // Add right-click event listener for POI creation
            map.on('contextmenu', function (e) {
                selectedLatitude = e.latlng.lat;
                selectedLongitude = e.latlng.lng;
                
                // Update coordinate display
                $('#selectedCoordinates').text(`${selectedLatitude.toFixed(6)}, ${selectedLongitude.toFixed(6)}`);
                
                // Reset form
                resetPoiForm();
                
                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('createPoiModal'));
                modal.show();
            });
            
            // Save zoom level to localStorage when user zooms the map
            map.on('zoomend', function() {
                const currentZoom = map.getZoom();
                localStorage.setItem(STORAGE_KEYS.mapZoom, currentZoom);
            });
            
            // Auto-reload POIs when map is moved or zoomed
            map.on('moveend', function() {
                console.log('[Map] moveend event fired, programmaticMapMove=' + programmaticMapMove);
                const center = map.getCenter();
                const currentRadius = parseInt($('#radiusInput').val()); // Keep user's radius constant
                
                console.log(`[Map] Map center: lat=${center.lat}, lon=${center.lng}, radius=${currentRadius}`);
                
                // Only update input fields if this was a USER-initiated map move (drag/pan)
                // NOT if triggered by programmatic map.setView() from input change
                if (!programmaticMapMove) {
                    console.log('[Map] User dragged map - updating input fields with map center');
                    // Update input fields with new center coordinates only
                    $('#latitudeInput').val(center.lat.toFixed(6));
                    $('#longitudeInput').val(center.lng.toFixed(6));
                    
                    // Save to localStorage (this will trigger List page to reload when navigated to)
                    saveSettingsToStorage();
                } else {
                    console.log('[Map] Programmatic map move - keeping input fields as-is');
                }
                
                // Reset flag for next event
                programmaticMapMove = false;
                
                // Always load POIs for new position with current radius
                console.log('[Map] Loading POIs from moveend handler');
                loadPointsOfInterest(center.lat, center.lng, currentRadius);
            });
            
            // Load initial points of interest with current settings
            loadPointsOfInterest(currentLat, currentLon, currentRadius);
            
            // Check if we need to reload due to List page update
            if (window.mapNeedsReload) {
                window.mapNeedsReload = false;
                // Reload with updated parameters
                const lat = parseFloat($('#latitudeInput').val());
                const lon = parseFloat($('#longitudeInput').val());
                const radius = parseInt($('#radiusInput').val());
                map.setView([lat, lon], map.getZoom());
                loadPointsOfInterest(lat, lon, radius);
            }
        }
        
        function loadEditModalCategories() {
            console.log('[Map] loadEditModalCategories() called');
            // Try to reuse already loaded categories from CategoryManager
            const loadedCategories = CategoryManager.getAllCategories();
            console.log('[Map] CategoryManager.getAllCategories() returned:', loadedCategories);
            
            if (loadedCategories && loadedCategories.length > 0) {
                console.log('[Map] Reusing categories from CategoryManager:', loadedCategories);
                availableCategories = loadedCategories;
                populateEditModalCategoryDropdown(loadedCategories);
                return;
            }
            
            // Fallback: Load directly from API if CategoryManager failed
            console.log('[Map] CategoryManager has no categories, loading directly from API');
            $.ajax({
                url: '/api/categories',
                type: 'GET',
                success: function (categories) {
                    console.log('[Map] Loaded categories from API:', categories);
                    availableCategories = categories;
                    populateEditModalCategoryDropdown(categories);
                },
                error: function (xhr, status, error) {
                    console.warn('Could not load categories from backend, using fallback:', error);
                    // Use fallback categories
                    const fallbackCategories = [
                        'landmark', 'museum', 'castle', 'cathedral', 'park', 
                        'restaurant', 'hotel', 'gasstation', 'hospital', 'pharmacy',
                        'shop', 'bank', 'school', 'library', 'theater'
                    ];
                    availableCategories = fallbackCategories;
                    populateEditModalCategoryDropdown(fallbackCategories);
                }
            });
        }
        
        function populateEditModalCategoryDropdown(categories) {
            console.log('[Map] populateEditModalCategoryDropdown() called with:', categories);
            const $categorySelect = $('#poiCategory');
            console.log('[Map] Found dropdown element:', $categorySelect.length > 0 ? 'YES' : 'NO');
            $categorySelect.empty();
            $categorySelect.append('<option value="">-- Select Category --</option>');
            
            categories.forEach(function (category) {
                // Value and display text both lowercase (consistent with List page)
                const lowerCategory = category.toLowerCase();
                $categorySelect.append(`<option value="${lowerCategory}">${lowerCategory}</option>`);
            });
            
            console.log('[Map] Dropdown populated, total options:', $categorySelect.find('option').length);
        }
        
        function setupModalEventHandlers() {
            // Enable/disable save button based on form validation
            $('#poiCategory, #poiDetails').on('input change', function () {
                validatePoiForm();
            });
            
            // Handle Save button click
            $('#savePoiBtn').click(function () {
                if (validatePoiForm()) {
                    savePoi();
                }
            });
            
            // Handle keyboard shortcuts
            $('#createPoiModal').on('keydown', function (e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if ($('#savePoiBtn').prop('disabled') === false) {
                        savePoi();
                    }
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    bootstrap.Modal.getInstance(document.getElementById('createPoiModal')).hide();
                }
            });
        }
        
        function validatePoiForm() {
            const category = $('#poiCategory').val().trim();
            const name = $('#poiName').val().trim();
            const details = $('#poiDetails').val().trim();
            const isValid = category !== '' && name !== '' && details !== '';
            
            $('#savePoiBtn').prop('disabled', !isValid);
            
            return isValid;
        }
        
        function resetPoiForm() {
            $('#createPoiForm')[0].reset();
            $('#poiCategory').removeClass('is-invalid');
            $('#poiName').removeClass('is-invalid');
            $('#poiDetails').removeClass('is-invalid');
            $('#savePoiBtn').prop('disabled', true);
        }
        
        function savePoi() {
            if (!validatePoiForm()) return;
            
            const category = $('#poiCategory').val().trim();
            const name = $('#poiName').val().trim();
            const details = $('#poiDetails').val().trim();
            
            // Basic XSS prevention - encode HTML entities
            const sanitizedName = $('<div>').text(name).html();
            const sanitizedDetails = $('<div>').text(details).html();
            
            // Only send required fields - do NOT send href or address
            const newPoi = {
                category: category,
                name: sanitizedName,
                details: sanitizedDetails,
                location: {
                    type: 'Point',
                    coordinates: [selectedLongitude, selectedLatitude]
                }
            };
            
            // Disable save button to prevent double submission
            $('#savePoiBtn').prop('disabled', true).text('Saving...');
            
            $.ajax({
                url: '/api/pointsofinterest',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(newPoi),
                success: function (response) {
                    console.log('POI created successfully:', response);
                    console.log('New POI location:', selectedLatitude, selectedLongitude);
                    
                    // Hide modal
                    bootstrap.Modal.getInstance(document.getElementById('createPoiModal')).hide();
                    
                    // Add the new POI immediately to the map
                    // Backend returns empty response, so we use the data we sent
                    const coords = [selectedLongitude, selectedLatitude];
                    const lat = coords[1];
                    const lng = coords[0];
                    
                    console.log('Adding marker at:', lat, lng);
                    
                    // Create POI object for display
                    const displayPoi = {
                        category: $('#poiCategory').val().trim(),
                        name: $('#poiName').val().trim(),
                        details: $('#poiDetails').val().trim(),
                        location: {
                            type: 'Point',
                            coordinates: coords
                        }
                    };
                    
                    L.marker([lat, lng]).addTo(map)
                        .bindPopup(getMarkerPopupFor(displayPoi))
                        .openPopup(); // Open popup to show the newly created POI
                    
                    console.log('Marker added successfully');
                    
                    // Also refresh the map data in background to sync with server
                    const center = map.getCenter();
                    const radius = getRadiusForZoom(map.getZoom());
                    loadPointsOfInterest(center.lat, center.lng, radius);
                    
                    // Show success message (optional)
                    // Could add a toast notification here
                },
                error: function (xhr, status, error) {
                    console.error('Error creating POI:', error);
                    console.error('Status:', status);
                    console.error('Response:', xhr.responseText);
                    
                    alert('Failed to create POI. Please try again.');
                },
                complete: function () {
                    // Re-enable save button and reset text
                    $('#savePoiBtn').prop('disabled', false).text('Save (Enter)');
                }
            });
        }
        
        function loadPointsOfInterest(latitude, longitude, radius) {
            // Get selected categories from CategoryManager
            const selectedCategories = CategoryManager.getSelectedCategories();
            console.log(`[Map] Loading POIs with ${selectedCategories.length} categories:`, selectedCategories);
            
            // Build data object with lat, lon, radius
            const requestData = {
                lat: latitude,
                lon: longitude,
                radius: radius
            };
            
            // Add categories using array index notation for ASP.NET Core binding
            selectedCategories.forEach((category, index) => {
                requestData[`category[${index}]`] = category;
            });
            
            $.ajax({
                url: '/api/pointsofinterest',
                type: 'GET',
                traditional: true, // Important for array parameter serialization
                data: requestData,
                success: function (points) {
                    console.log(`Loaded ${points.length} POIs for coordinates (${latitude.toFixed(4)}, ${longitude.toFixed(4)}) with radius ${radius}m`);
                    showPointsOnMap(points);
                },
                error: function (xhr, status, error) {
                    console.error('Error loading points of interest:', error);
                    console.error('Status:', status);
                    console.error('XHR:', xhr);
                }
            });
        }
        
        function reloadCurrentPois() {
            const lat = parseFloat($('#latitudeInput').val());
            const lon = parseFloat($('#longitudeInput').val());
            const radius = parseInt($('#radiusInput').val());
            
            console.log('[Map] Reloading POIs with current settings:', lat, lon, radius);
            loadPointsOfInterest(lat, lon, radius);
        }
        
        function showPointsOnMap(points) {
            pointsOfInterest = points;
            
            if (!map) {
                console.error('Map is not initialized');
                return;
            }
            
            // Clear existing markers from the layer group
            markersLayer.clearLayers();
            
            // Add new markers to the layer group
            pointsOfInterest.forEach(function (poi) {
                const coords = poi.location.coordinates;
                const lat = coords[1];
                const lng = coords[0];
                
                const marker = L.marker([lat, lng]);
                marker.bindPopup(getMarkerPopupFor(poi));
                markersLayer.addLayer(marker);
            });
            
            // Apply current text filter if exists
            const currentFilter = $('#poiFilterInput').val();
            if (currentFilter && typeof applyFilter === 'function') {
                console.log('[Map] Applying text filter after loading POIs:', currentFilter);
                applyFilter(currentFilter);
            }
        }
        
        function getMarkerPopupFor(poi) {
            const iconClass = getCategoryIcon(poi.category);
            
            let popupContent = '<div>';
            
            popupContent += '<h6><i class="bi ' + iconClass + ' text-primary me-2"></i>' + poi.category + '</h6>';
            // Show Name in bold first, after category (if present)
            if (poi.name) {
                popupContent += '<p><strong>' + poi.name + '</strong></p>';
            }
            
            
            if (poi.details) {
                const lines = poi.details.split('\n');
                lines.forEach(function (line) {
                    if (line.trim()) {
                        popupContent += '<p>' + line + '</p>';
                    }
                });
            }
            
            popupContent += '</div>';
            return popupContent;
        }
        
        function getRadiusForZoom(zoom) {
            // Exact same logic as Angular frontend MapDataService
            if (zoom <= 8) {
                return 20000;
            }
            if (zoom <= 11) {
                return 10000;
            }
            if (zoom == 12) {
                return 5000;
            }
            if (zoom == 13) {
                return 2000;
            }
            return 1000;
        }
        

    </script>
}
