@{
    ViewData["Title"] = "Point of Interest Map";
}

<style>
    /* Fixed top controls */
    .top-controls {
        position: fixed;
        top: 56px; /* Height of navbar */
        left: 0;
        right: 0;
        background-color: white;
        padding: 15px 0;
        border-bottom: 1px solid #dee2e6;
        z-index: 1000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Map container with margin for controls */
    .map-container {
        margin-top: 210px; /* Space for fixed controls including filter */
        height: calc(100vh - 270px); /* Full height minus navbar and controls */
    }
    
    .map_large {
        height: 100%;
        width: 100%;
    }
</style>

<!-- Fixed Top Controls -->
<div class="top-controls">
    <div class="container">
        <div class="row g-3">
            <div class="col-md-3">
                <label for="latitudeInput" class="form-label">Latitude (Range: -90 to 90)</label>
                <input type="number" class="form-control" id="latitudeInput" value="51.0504" step="0.0001" min="-90" max="90">
            </div>
            <div class="col-md-3">
                <label for="longitudeInput" class="form-label">Longitude (Range: -180 to 180)</label>
                <input type="number" class="form-control" id="longitudeInput" value="13.7373" step="0.0001" min="-180" max="180">
            </div>
            <div class="col-md-4">
                <label for="radiusInput" class="form-label">Radius <span id="radiusValue">2000</span></label>
                <input type="range" class="form-range" id="radiusInput" min="100" max="5000" value="2000" step="100">
            </div>
            <div class="col-md-2">
                <label class="form-label d-block">&nbsp;</label>
                <button type="button" class="btn btn-primary w-100" id="loadPoisBtn">
                    <i class="bi bi-arrow-clockwise me-1"></i>Load POIs
                </button>
            </div>
        </div>
        <!-- Filter Input Field -->
        <div class="row mt-3">
            <div class="col-12">
                <label for="poiFilterInput" class="form-label">
                    Filter POIs by Details
                </label>
                <input type="text" class="form-control" id="poiFilterInput" placeholder="Enter text to filter POIs...">
            </div>
        </div>
    </div>
</div>

<div class="container map-container">
    <div id="map" class="jumbotron map_large"></div>
</div>

<!-- POI Creation Modal -->
<div class="modal fade" id="createPoiModal" tabindex="-1" aria-labelledby="createPoiModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPoiModalLabel">Create New Point of Interest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createPoiForm">
                    <div class="mb-3">
                        <label for="poiCategory" class="form-label">Category *</label>
                        <select class="form-select" id="poiCategory" required>
                            <option value="">-- Select Category --</option>
                        </select>
                        <div class="invalid-feedback">
                            Please select a category.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="poiDetails" class="form-label">Details *</label>
                        <textarea class="form-control" id="poiDetails" rows="4" 
                                  placeholder="Enter details about this point of interest..." 
                                  required maxlength="1000"></textarea>
                        <div class="invalid-feedback">
                            Please enter details (max 1000 characters).
                        </div>
                        <div class="form-text">
                            You can use quotes, special characters, and line breaks.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">
                            Location: <span id="selectedCoordinates"></span>
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelPoiBtn">
                    Cancel (Esc)
                </button>
                <button type="button" class="btn btn-primary" id="savePoiBtn" disabled>
                    Save (Enter)
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let map;
        let pointsOfInterest = [];
        let selectedLatitude = null;
        let selectedLongitude = null;
        let availableCategories = [];
        let markersLayer = L.layerGroup(); // Layer to hold all POI markers
        
        // localStorage keys for synchronization between pages
        const STORAGE_KEYS = {
            latitude: 'poi_latitude',
            longitude: 'poi_longitude',
            radius: 'poi_radius',
            view: 'poi_view',
            lastUpdate: 'poi_last_update',
            needsReload: 'poi_needs_reload',
            sessionStart: 'poi_session_start',
            mapZoom: 'poi_map_zoom'
        };
        
        // Default coordinates (Dresden)
        const latitudeDefault = 51.0504;
        const longitudeDefault = 13.7373;
        const radiusDefault = 2000;
        const zoomDefault = 13;
        
        // Session timeout: 30 minutes of inactivity = new session
        const SESSION_TIMEOUT_MS = 30 * 60 * 1000;
        
        // Initialize the map when the page loads
        $(document).ready(function () {
            // Check if this is a new browser session
            const lastActivity = localStorage.getItem(STORAGE_KEYS.sessionStart);
            const now = Date.now();
            const isNewSession = !lastActivity || (now - parseInt(lastActivity)) > SESSION_TIMEOUT_MS;
            
            if (isNewSession) {
                // This is a NEW session - clear settings but keep view preference
                localStorage.removeItem(STORAGE_KEYS.latitude);
                localStorage.removeItem(STORAGE_KEYS.longitude);
                localStorage.removeItem(STORAGE_KEYS.radius);
                localStorage.removeItem(STORAGE_KEYS.needsReload);
                localStorage.removeItem(STORAGE_KEYS.mapZoom);
                localStorage.setItem(STORAGE_KEYS.view, 'cards');
            }
            
            // Update session timestamp
            localStorage.setItem(STORAGE_KEYS.sessionStart, now.toString());
            
            // Load values from localStorage or use defaults
            loadSettingsFromStorage();
            
            // Check if we need to reload due to updates from List page
            checkForReloadFlag();
            
            // Initialize map with loaded settings
            initializeMap();
            loadAvailableCategories();
            setupModalEventHandlers();
            setupControlHandlers();
            setupFilterFunctionality();
        });
        
        function loadSettingsFromStorage() {
            // Load values from localStorage or use defaults
            const lat = localStorage.getItem(STORAGE_KEYS.latitude);
            const lon = localStorage.getItem(STORAGE_KEYS.longitude);
            const radius = localStorage.getItem(STORAGE_KEYS.radius);
            
            const actualLat = lat ? parseFloat(lat) : latitudeDefault;
            const actualLon = lon ? parseFloat(lon) : longitudeDefault;
            const actualRadius = radius ? parseInt(radius) : radiusDefault;
            
            // Set input fields to actual values
            $('#latitudeInput').val(actualLat);
            $('#longitudeInput').val(actualLon);
            $('#radiusInput').val(actualRadius);
            $('#radiusValue').text(actualRadius + ' m');
            
            // Save to localStorage if they were defaults (ensures consistency)
            if (!lat) localStorage.setItem(STORAGE_KEYS.latitude, actualLat);
            if (!lon) localStorage.setItem(STORAGE_KEYS.longitude, actualLon);
            if (!radius) localStorage.setItem(STORAGE_KEYS.radius, actualRadius);
        }
        
        function saveSettingsToStorage() {
            const lat = $('#latitudeInput').val();
            const lon = $('#longitudeInput').val();
            const radius = $('#radiusInput').val();
            
            localStorage.setItem(STORAGE_KEYS.latitude, lat);
            localStorage.setItem(STORAGE_KEYS.longitude, lon);
            localStorage.setItem(STORAGE_KEYS.radius, radius);
            
            // Set flag that List page needs to reload
            localStorage.setItem(STORAGE_KEYS.needsReload, 'true');
        }
        
        function checkForReloadFlag() {
            // Check if List page triggered a reload request
            const needsReload = localStorage.getItem(STORAGE_KEYS.needsReload);
            if (needsReload === 'true') {
                // Clear the flag
                localStorage.removeItem(STORAGE_KEYS.needsReload);
                
                // Reload the map with stored parameters after initialization
                // Set a flag to reload after map is initialized
                window.mapNeedsReload = true;
            }
        }
        
        function setupControlHandlers() {
            // Update radius display when slider changes and save to storage
            $('#radiusInput').on('input', function () {
                $('#radiusValue').text($(this).val());
                saveSettingsToStorage();
            });
            
            // Save settings when inputs change
            $('#latitudeInput, #longitudeInput').on('change', function () {
                saveSettingsToStorage();
            });
            
            // Load POIs button handler
            $('#loadPoisBtn').on('click', function () {
                const lat = parseFloat($('#latitudeInput').val());
                const lon = parseFloat($('#longitudeInput').val());
                const radius = parseInt($('#radiusInput').val());
                
                // Save to localStorage (this sets needsReload flag for List page)
                saveSettingsToStorage();
                
                // Update map center and reload POIs
                map.setView([lat, lon], map.getZoom());
                loadPointsOfInterest(lat, lon, radius);
            });
        }
        
        function initializeMap() {
            // Fix for default markers in Leaflet with ASP.NET
            delete L.Icon.Default.prototype._getIconUrl;
            L.Icon.Default.mergeOptions({
                iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
                iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
                shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
            });
            
            // Get current values from inputs (already loaded from localStorage)
            const currentLat = parseFloat($('#latitudeInput').val());
            const currentLon = parseFloat($('#longitudeInput').val());
            const currentRadius = parseInt($('#radiusInput').val());
            
            // Load saved zoom level or use default
            const savedZoom = localStorage.getItem(STORAGE_KEYS.mapZoom);
            const currentZoom = savedZoom ? parseInt(savedZoom) : zoomDefault;
            
            // Initialize the map with current settings
            map = L.map('map').setView([currentLat, currentLon], currentZoom);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            // Add markers layer to map
            markersLayer.addTo(map);
            
            // Disable default browser context menu on map
            map.getContainer().addEventListener('contextmenu', function (e) {
                e.preventDefault();
            });
            
            // Add right-click event listener for POI creation
            map.on('contextmenu', function (e) {
                selectedLatitude = e.latlng.lat;
                selectedLongitude = e.latlng.lng;
                
                // Update coordinate display
                $('#selectedCoordinates').text(`${selectedLatitude.toFixed(6)}, ${selectedLongitude.toFixed(6)}`);
                
                // Reset form
                resetPoiForm();
                
                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('createPoiModal'));
                modal.show();
            });
            
            // Save zoom level to localStorage when user zooms the map
            map.on('zoomend', function() {
                const currentZoom = map.getZoom();
                localStorage.setItem(STORAGE_KEYS.mapZoom, currentZoom);
            });
            
            // Load initial points of interest with current settings
            loadPointsOfInterest(currentLat, currentLon, currentRadius);
            
            // Check if we need to reload due to List page update
            if (window.mapNeedsReload) {
                window.mapNeedsReload = false;
                // Reload with updated parameters
                const lat = parseFloat($('#latitudeInput').val());
                const lon = parseFloat($('#longitudeInput').val());
                const radius = parseInt($('#radiusInput').val());
                map.setView([lat, lon], map.getZoom());
                loadPointsOfInterest(lat, lon, radius);
            }
            
            // REMOVED: Auto-reload on map movement - user must click "Load POIs" button
            // This ensures synchronization with the List page
        }
        
        function loadAvailableCategories() {
            $.ajax({
                url: '/api/categories',
                type: 'GET',
                success: function (categories) {
                    availableCategories = categories;
                    populateCategoryDropdown(categories);
                },
                error: function (xhr, status, error) {
                    console.warn('Could not load categories from backend, using fallback:', error);
                    // Use fallback categories
                    const fallbackCategories = [
                        'landmark', 'museum', 'castle', 'cathedral', 'park', 
                        'restaurant', 'hotel', 'gasstation', 'hospital', 'pharmacy',
                        'shop', 'bank', 'school', 'library', 'theater'
                    ];
                    availableCategories = fallbackCategories;
                    populateCategoryDropdown(fallbackCategories);
                }
            });
        }
        
        function populateCategoryDropdown(categories) {
            const $categorySelect = $('#poiCategory');
            $categorySelect.empty();
            $categorySelect.append('<option value="">-- Select Category --</option>');
            
            categories.forEach(function (category) {
                $categorySelect.append(`<option value="${category}">${capitalizeFirstLetter(category)}</option>`);
            });
        }
        
        function setupModalEventHandlers() {
            // Enable/disable save button based on form validation
            $('#poiCategory, #poiDetails').on('input change', function () {
                validatePoiForm();
            });
            
            // Handle Save button click
            $('#savePoiBtn').click(function () {
                if (validatePoiForm()) {
                    savePoi();
                }
            });
            
            // Handle keyboard shortcuts
            $('#createPoiModal').on('keydown', function (e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if ($('#savePoiBtn').prop('disabled') === false) {
                        savePoi();
                    }
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    bootstrap.Modal.getInstance(document.getElementById('createPoiModal')).hide();
                }
            });
        }
        
        function validatePoiForm() {
            const category = $('#poiCategory').val().trim();
            const details = $('#poiDetails').val().trim();
            const isValid = category !== '' && details !== '';
            
            $('#savePoiBtn').prop('disabled', !isValid);
            
            return isValid;
        }
        
        function resetPoiForm() {
            $('#createPoiForm')[0].reset();
            $('#poiCategory').removeClass('is-invalid');
            $('#poiDetails').removeClass('is-invalid');
            $('#savePoiBtn').prop('disabled', true);
        }
        
        function savePoi() {
            if (!validatePoiForm()) return;
            
            const category = $('#poiCategory').val().trim();
            const details = $('#poiDetails').val().trim();
            
            // Basic XSS prevention - encode HTML entities
            const sanitizedDetails = $('<div>').text(details).html();
            
            // Only send required fields - do NOT send href or address
            const newPoi = {
                category: category,
                details: sanitizedDetails,
                location: {
                    type: 'Point',
                    coordinates: [selectedLongitude, selectedLatitude]
                }
            };
            
            // Disable save button to prevent double submission
            $('#savePoiBtn').prop('disabled', true).text('Saving...');
            
            $.ajax({
                url: '/api/pointsofinterest',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(newPoi),
                success: function (response) {
                    console.log('POI created successfully:', response);
                    console.log('New POI location:', selectedLatitude, selectedLongitude);
                    
                    // Hide modal
                    bootstrap.Modal.getInstance(document.getElementById('createPoiModal')).hide();
                    
                    // Add the new POI immediately to the map
                    // Backend returns empty response, so we use the data we sent
                    const coords = [selectedLongitude, selectedLatitude];
                    const lat = coords[1];
                    const lng = coords[0];
                    
                    console.log('Adding marker at:', lat, lng);
                    
                    // Create POI object for display
                    const displayPoi = {
                        category: $('#poiCategory').val().trim(),
                        details: $('#poiDetails').val().trim(),
                        location: {
                            type: 'Point',
                            coordinates: coords
                        }
                    };
                    
                    L.marker([lat, lng]).addTo(map)
                        .bindPopup(getMarkerPopupFor(displayPoi))
                        .openPopup(); // Open popup to show the newly created POI
                    
                    console.log('Marker added successfully');
                    
                    // Also refresh the map data in background to sync with server
                    const center = map.getCenter();
                    const radius = getRadiusForZoom(map.getZoom());
                    loadPointsOfInterest(center.lat, center.lng, radius);
                    
                    // Show success message (optional)
                    // Could add a toast notification here
                },
                error: function (xhr, status, error) {
                    console.error('Error creating POI:', error);
                    console.error('Status:', status);
                    console.error('Response:', xhr.responseText);
                    
                    alert('Failed to create POI. Please try again.');
                },
                complete: function () {
                    // Re-enable save button and reset text
                    $('#savePoiBtn').prop('disabled', false).text('Save (Enter)');
                }
            });
        }
        
        function loadPointsOfInterest(latitude, longitude, radius) {
            $.ajax({
                url: '/api/pointsofinterest',
                type: 'GET',
                data: {
                    lat: latitude,
                    lon: longitude,
                    radius: radius
                },
                success: function (points) {
                    console.log(`Loaded ${points.length} POIs for coordinates (${latitude.toFixed(4)}, ${longitude.toFixed(4)}) with radius ${radius}m`);
                    showPointsOnMap(points);
                },
                error: function (xhr, status, error) {
                    console.error('Error loading points of interest:', error);
                    console.error('Status:', status);
                    console.error('XHR:', xhr);
                }
            });
        }
        
        function showPointsOnMap(points) {
            pointsOfInterest = points;
            
            if (!map) {
                console.error('Map is not initialized');
                return;
            }
            
            // Apply filter if exists
            const currentFilter = $('#poiFilterInput').val();
            if (currentFilter) {
                applyMapFilter(currentFilter);
            } else {
                // Clear existing markers from the layer group
                markersLayer.clearLayers();
                
                // Add new markers to the layer group
                pointsOfInterest.forEach(function (poi) {
                    const coords = poi.location.coordinates;
                    const lat = coords[1];
                    const lng = coords[0];
                    
                    const marker = L.marker([lat, lng]);
                    marker.bindPopup(getMarkerPopupFor(poi));
                    markersLayer.addLayer(marker);
                });
            }
        }
        
        function getMarkerPopupFor(poi) {
            let popupContent = '<div>';
            popupContent += '<h6>' + poi.category + '</h6>';
            
            if (poi.details) {
                const lines = poi.details.split('\n');
                lines.forEach(function (line) {
                    if (line.trim()) {
                        popupContent += '<p>' + line + '</p>';
                    }
                });
            }
            
            popupContent += '</div>';
            return popupContent;
        }
        
        function getRadiusForZoom(zoom) {
            // Exact same logic as Angular frontend MapDataService
            if (zoom <= 8) {
                return 20000;
            }
            if (zoom <= 11) {
                return 10000;
            }
            if (zoom == 12) {
                return 5000;
            }
            if (zoom == 13) {
                return 2000;
            }
            return 1000;
        }
        
        function setupFilterFunctionality() {
            const filterInput = $('#poiFilterInput');
            
            // Load filter value from localStorage
            const savedFilter = localStorage.getItem('poi_filter') || '';
            filterInput.val(savedFilter);
            
            // Apply initial filter if exists
            if (savedFilter && pointsOfInterest.length > 0) {
                applyMapFilter(savedFilter);
            }
            
            // Apply filter on input
            filterInput.on('input', function() {
                const filterValue = $(this).val();
                localStorage.setItem('poi_filter', filterValue);
                applyMapFilter(filterValue);
            });
        }
        
        function applyMapFilter(filterValue) {
            const filterLower = filterValue.toLowerCase();
            
            // Clear existing markers
            markersLayer.clearLayers();
            
            // Filter and add markers
            pointsOfInterest.forEach(function (poi) {
                const details = (poi.details || '').toLowerCase();
                
                // Show marker if filter is empty or details contain the filter text
                if (filterLower === '' || details.includes(filterLower)) {
                    const coords = poi.location.coordinates;
                    const lat = coords[1];
                    const lng = coords[0];
                    
                    const marker = L.marker([lat, lng]);
                    marker.bindPopup(getMarkerPopupFor(poi));
                    markersLayer.addLayer(marker);
                }
            });
        }
    </script>
}
