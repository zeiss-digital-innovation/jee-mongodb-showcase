package de.zeiss.mongodb_ws.spring_geo_service.rest.controller;

import de.zeiss.mongodb_ws.spring_geo_service.rest.model.PointOfInterest;
import org.geojson.Point;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;

@RestController
@RequestMapping(value = "/poi")
public class PointOfInterestController {

    private List<PointOfInterest> mockPOIs = new ArrayList<>();

    private static final Logger logger = Logger.getLogger(PointOfInterestController.class.getName());

    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public PointOfInterest getPointOfInterest(@PathVariable("id") String id) {
        ensureMockPOIsInitialized();
        return mockPOIs.getFirst();
    }

    @GetMapping
    public Collection<PointOfInterest> findPointsOfInterest(@RequestParam double lat, @RequestParam double lon,
                                                            @RequestParam int radius, @RequestParam(value =  "expand", required = false) String expand) {
        ensureMockPOIsInitialized();
        return mockPOIs;
    }

    @PostMapping
    public ResponseEntity<Void> create(@RequestBody PointOfInterest resource) {
        ensureMockPOIsInitialized();
        PointOfInterest mockPOI = createMockPOI("new-poi");
        mockPOI.setCategory(resource.getCategory());
        mockPOI.setDetails(resource.getDetails());
        mockPOI.setLocation(resource.getLocation());
        mockPOIs.add(mockPOI);
        // set the Location header
        URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(mockPOI.getId())
                .toUri();

        logger.info("Location header for created POI: " + location);
        return ResponseEntity.created(location).build();
    }

    @PutMapping(value = "/{id}")
    @ResponseStatus(HttpStatus.OK)
    public void update(@PathVariable( "id" ) Long id, @RequestBody PointOfInterest resource) {
            // TODO implement update logic
    }

    @DeleteMapping(value = "/{id}")
    @ResponseStatus(HttpStatus.OK)
    public void delete(@PathVariable("id") Long id) {
        // TODO implement delete logic
    }

    private void ensureMockPOIsInitialized() {
        if (mockPOIs.isEmpty()) {
            mockPOIs.add(createMockPOI("poi1"));
            mockPOIs.add(createMockPOI("poi2"));
            mockPOIs.add(createMockPOI("poi3"));
        }
    }

    private PointOfInterest createMockPOI(String id) {
        PointOfInterest poi = new PointOfInterest();
        poi.setId(id);
        // set href using the ServletUriComponentsBuilder
        String uriString = ServletUriComponentsBuilder.fromCurrentRequestUri().toUriString();

        if (!uriString.endsWith("/" + id)) {
            uriString = uriString + "/" + id;
        }

        poi.setHref(uriString);
        poi.setCategory("coffee");
        poi.setDetails("A mock poi generated by the Spring Boot backend.");

        poi.setLocation(new Point(getRandomCoordinateValueBetween(13.7, 13.8), getRandomCoordinateValueBetween(51.0, 51.1)));
        return poi;
    }

    private double getRandomCoordinateValueBetween(double min, double max) {
        return min + (Math.random() * (max - min));
    }
}
